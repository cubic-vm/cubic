version: '3'

env:
  DOCKER_CMD: docker run --rm -v .:/usr/local/app
  IMAGE: cubic:latest

tasks:
  build-image:
    cmds:
      - if [ -z "$(docker images -q $IMAGE)" ]; then docker build -t $IMAGE .; fi

  clean:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo clean

  cleanall:
    deps: [build-image]
    cmds:
      - docker image rm -f $IMAGE

  format:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo fmt --check

  fix-format:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo fmt

  lint:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo clippy -- -D warnings

  fix-lint:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo clippy --fix --allow-dirty --allow-staged

  test:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo test

  audit:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo audit

  update:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo update

  sh:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD -it $IMAGE  bash

  check:
    deps: [format, lint, test, audit]

  fix:
    deps: [fix-format, fix-lint]

  build:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE cargo build

  doc:
    deps: [build-image]
    cmds:
      - $DOCKER_CMD $IMAGE sphinx-build docs target/doc && python3 -m http.server -d target/doc 4000

  release:
    deps: [build-image]
    cmds:
      - sed 's/^\(version =\).*$/\1 "{{.version}}"/g' -i Cargo.toml
      - "sed \"s/^\\(version:\\).*$/\\1 '{{.version}}'/g\" -i snapcraft.yaml"
      - "sed \"s/^\\(release = \\).*$/\\1 'v{{.version}}'/g\" -i docs/conf.py"
      - task: build
